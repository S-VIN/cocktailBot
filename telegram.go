package main

import (
	//"fmt"
	"math/rand"
	"strconv"
	//"strings"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var telegram Telegram

var replyKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–õ–£–ß–ê–ô–ù–´–ô –ê–ù–ï–ö"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–õ–£–ß–ê–ô–ù–´–ô –°–ú–ï–®–ù–û–ô –ê–ù–ï–ö"),
		tgbotapi.NewKeyboardButton("–°–õ–£–ß–ê–ô–ù–´–ô –ù–ï–°–ú–ï–®–ù–û–ô –ê–ù–ï–ö"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–õ–£–ß–ê–ô–ù–´–ô –ò–ó–ë–†–ê–ù–ù–´–ô –ê–ù–ï–ö"),
		tgbotapi.NewKeyboardButton("–°–ü–ò–°–û–ö –ò–ó–ë–†–ê–ù–ù–´–• –ê–ù–ï–ö–û–í"),
	),
)

type Telegram struct {
	bot       *tgbotapi.BotAPI
	botConfig tgbotapi.UpdateConfig
}

func (t *Telegram) CreateBot() (err error) {
	t.bot, err = tgbotapi.NewBotAPI("1356963581:AAGPlUyAkofdhcehODZ-jvIv9Qu9T196pRQ")
	if err != nil {
		return err
	}
	t.botConfig = tgbotapi.NewUpdate(0)
	t.botConfig.Timeout = 60
	return nil
}

func (t Telegram) SendMessage(chatID int64, input string) error {
	_, err := t.bot.Send(tgbotapi.NewMessage(chatID, input))
	return err
}

func (t Telegram) SendReplyKeyboard(chatID int64) error {
	msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–æ—â–µ —Ö–∏—Ö–∏–∫–∞—Ç—å, –ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")
	msg.ReplyMarkup = replyKeyboard
	_, err := t.bot.Send(msg)
	return err
}

func (t Telegram) SendAnek(chatID int64, id int) error {
	if id < 0 || id > len(database.arrayOfAneks) {
		return nil
	}

	var likesKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(database.arrayOfAneks[id].GetLikes())+" üëçüèª", "l"+strconv.Itoa(id)),
			tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(database.arrayOfAneks[id].GetDislikes())+" üëéüèæ", "d"+strconv.Itoa(id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("ü§é", "f"+strconv.Itoa(id)),
		),
	)

	msg := tgbotapi.NewMessage(chatID, database.GetAnekText(id))
	msg.ReplyMarkup = likesKeyboard
	_, err := t.bot.Send(msg)
	return err
}

func (t *Telegram) GetResponseFromInline(chatID int64, input string, callbackQuerryID string) {
	temp, _ := strconv.Atoi(input[1:len(input)])
	switch os := input[0]; os {
	case 'l':
		if !database.IsLike(chatID, temp) {
			database.Like(chatID, temp)
		} else {
			t.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuerryID, "–ù—É —Ç—ã –∏ —à–∞–ª—É–Ω! –õ—é–±–∏—à—å —à–∞–ª–∏—Ç—å! –õ–∞–π–∫ —Ç–æ —Ç—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª."))
		}
	case 'd':
		if !database.IsDislike(chatID, temp) {
			database.Dislike(chatID, temp)
		} else {
			t.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuerryID, "–£—Ö, –∫–∞–∫–æ–π —Ç—ã –∑–ª–æ–π. –ü—Ä–æ–≤–µ—Ä—å —Å–∞—Ö–∞—Ä. –î–∏–∑–ª–∞–π–∫ —É–∂–µ —Å—Ç–æ—è–ª."))
		}
	case 'f':
		if !database.IsFavourite(chatID, temp) {
			database.Favourite(chatID, temp)
		} else {
			t.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuerryID, "–ê–Ω–µ–∫ –Ω–µ —Å–º–µ—à–Ω–æ–π, –∞ —Ç—ã –µ–≥–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª—è–µ—à—å."))
		}
	}
}

func (t Telegram) CheckUpdates() error {
	updates, err := t.bot.GetUpdatesChan(t.botConfig)
	if err != nil {
		return err
	}

	for update := range updates {
		if update.CallbackQuery != nil {
			t.GetResponseFromInline(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Data, update.CallbackQuery.ID)
			t.bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, "–ú–æ–ª–æ–¥–µ—Ü! –¢–≤–æ–π –ø–∞–ª–µ—Ü –∑–∞–ø–∏—Å–∞–Ω, –∫—É–¥–∞ –Ω–∞–¥–æ."))
		}

		if update.Message == nil {
			continue
		}
		t.CreateAnswer(*update.Message)
	}
	return nil
}

func (t Telegram) CreateAnswer(input tgbotapi.Message) {

	switch input.Text {

	case "/start":
		t.SendReplyKeyboard(input.Chat.ID)

	case "–°–õ–£–ß–ê–ô–ù–´–ô –ê–ù–ï–ö":
		t.SendAnek(input.Chat.ID, rand.Intn(anekQuantity))

	case "–°–õ–£–ß–ê–ô–ù–´–ô –°–ú–ï–®–ù–û–ô –ê–ù–ï–ö":
		textOfAnek, index := database.GetRandomLikedAnek(input.Chat.ID)
		if textOfAnek == "" {
			t.SendMessage(input.Chat.ID, "–°–º–µ—à–Ω—ã—Ö –∞–Ω–µ–∫–æ–≤ –Ω–µ—Ç. –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–µ—Ä–∫–∞–ª–æ.")
		} else {
			t.SendAnek(input.Chat.ID, index)
		}

	case "–°–õ–£–ß–ê–ô–ù–´–ô –ù–ï–°–ú–ï–®–ù–û–ô –ê–ù–ï–ö":
		textOfAnek, index := database.GetRandomDislikedAnek(input.Chat.ID)
		if textOfAnek == "" {
			t.SendMessage(input.Chat.ID, "–ù–µ—Å–º–µ—à–Ω—ã—Ö –∞–Ω–µ–∫–æ–≤ –Ω–µ—Ç. –°–º–µ–π—Å—è, –ª—é–±–∏—Ç–µ–ª—å –ø–æ—Ö–æ—Ö–æ—Ç–∞—Ç—å.")
		} else {
			t.SendAnek(input.Chat.ID, index)
		}

	case "–°–õ–£–ß–ê–ô–ù–´–ô –ò–ó–ë–†–ê–ù–ù–´–ô –ê–ù–ï–ö":
		textOfAnek, index := database.GetRandomFavouriteAnek(input.Chat.ID)
		if textOfAnek == "" {
			t.SendMessage(input.Chat.ID, "–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ª—é–±–∏—à—å. –¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –ø—É—Å—Ç–æ. –û–±—ã—á–Ω–æ —Ç–∞–∫–∏–µ –ª—é–¥–∏ —É–º–∏—Ä–∞—é—Ç –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ.")
		} else {
			t.SendAnek(input.Chat.ID, index)
		}

	case "–°–ü–ò–°–û–ö –ò–ó–ë–†–ê–ù–ù–´–• –ê–ù–ï–ö–û–í":
		temp, _ := database.GetRandomFavouriteAnek(input.Chat.ID)
		if temp == "" {
			t.SendMessage(input.Chat.ID, "–ê –≤–æ—Ç <3 —Ç–µ–±–µ, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫.")
		}
		t.SendMessage(input.Chat.ID, database.GetStringOfFavourites(input.Chat.ID))

	default:
		i, err := strconv.Atoi(input.Text)
		if err == nil && i >= 0 && i < anekQuantity {
			t.SendAnek(input.Chat.ID, i)
		} else {
			t.SendMessage(input.Chat.ID, "–¢—ã —á—Ç–æ, –¥—É—Ä–∞—á–æ–∫? –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, –ª–∏–±–æ –ø–∏—à–∏ —á–∏—Å–ª–æ. –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –∞ –Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ.")
		}
	}
}